include:
  - project: react-native/gitlab-ci
    file: /configs/cache.gitlab-ci.yml
  - project: react-native/gitlab-ci
    file: /configs/runners.gitlab-ci.yml
  - project: react-native/gitlab-ci
    file: /configs/rules.gitlab-ci.yml
  - project: react-native/gitlab-ci
    file: /jobs/yarn-install.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"

stages:
  - install
  - start_build
  - build
  - publish

variables:
  ENABLE_ANDROID: "yes"
  ENABLE_IOS: "yes"
  IMG_NODE: "node:18-alpine"
  REVIEWERS_LIST: "CHANGE_ME"
  REVIEW_CHAT_WEBHOOK: "CHANGE_ME"
  FASTLANE_SKIP_UPDATE_CHECK: "true"
  FASTLANE_HIDE_CHANGELOG: "true"
  FASTLANE_OPT_OUT_USAGE: "true"
  FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "30"
  FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "4"
  ANDROID_PROJECT_DIR: "android"
  ANDROID_BUILD_TYPE: "CHANGE_ME"
  PILOT_SKIP_WAITING_FOR_BUILD_PROCESSING: "true"
  MATCH_READONLY: "true"
  MATCH_STORAGE_MODE: "git"
  MATCH_GIT_URL: "git@gitlab.cdek.ru:react-native/fastlane-match-storage.git"
  MATCH_GIT_BRANCH: "master"
  MATCH_PASSWORD:  "SUPER_SECRET"
  IOS_PROJECT_PATH: "ios"
  IOS_PROJECT_WORKSPACE: "CHANGE_ME"
  GYM_WORKSPACE: $IOS_PROJECT_PATH/$IOS_PROJECT_WORKSPACE.xcworkspace
  GYM_CLEAN: "true"
  GYM_OUTPUT_DIRECTORY: $IOS_PROJECT_PATH/build
  GYM_OUTPUT_NAME: "CHANGE_ME"
  GYM_BUILD_PATH: $IOS_PROJECT_PATH/build
  GYM_ARCHIVE_PATH: $IOS_PROJECT_PATH/build/archive
  GYM_DERIVED_DATA_PATH: $IOS_PROJECT_PATH/build/DerivedData
  GYM_BUILDLOG_PATH: $IOS_PROJECT_PATH/build/Logs
  APP_STORE_CONNECT_API_KEY_KEY_ID: "SUPER_SECRET"
  APP_STORE_CONNECT_API_KEY_ISSUER_ID: "SUPER_SECRET"
  APP_STORE_CONNECT_API_KEY_KEY_FILE: "AuthKey.p8"
  APP_STORE_CONNECT_API_KEY_DURATION: "1200"
  JOB_ARTIFACT_PATH: $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw

start_build:
  stage: start_build
  extends:
    - .node_docker_runner
  script:
    - echo "Starting builds..."
  allow_failure: true
  interruptible: true
  when: manual

build:
  stage: build
  extends:
    - .yarn_install_build_dependent_job
  script:
    - npx yarn build
  artifacts:
    expire_in: 1 hour
    paths:
      - dist

yarn_install_mac:
  stage: build
  extends:
    - .macos_runner
    - .yarn_macos_cache_pull_push
    - .enable_native_builds
    - .needs_only_start_build
  script:
    - npx yarn install --frozen-lockfile

ruby_install_mac:
  stage: build
  extends:
    - .macos_runner
    - .ruby_macos_cache_pull_push
    - .enable_native_builds
    - .needs_only_start_build
  script:
    - bundle install

pods_install_mac:
  stage: build
  extends:
    - .macos_runner
    - .pods_macos_cache_pull_push
    - .enable_ios
    - .needs_yarn_ruby_start_build
  script:
    - bundle exec pod install --project-directory=ios

build_ios_simulator:
  stage: build
  extends:
    - .basic_ios_job
  variables:
    MATCH_TYPE: "appstore"
    GYM_EXPORT_METHOD: "app-store"
    GYM_SKIP_PACKAGE_IPA: "true"
    GYM_SKIP_ARCHIVE: "true"
    GYM_DESTINATION: "generic/platform=iOS Simulator"
    GYM_CONFIGURATION: Release
    APP_ARTIFACT_PATH: $JOB_ARTIFACT_PATH/$GYM_OUTPUT_NAME.app.zip
  script:
    - bundle exec pod install --project-directory=ios
    - bundle exec fastlane ios build
    - mv $GYM_DERIVED_DATA_PATH/Build/Products/$GYM_CONFIGURATION-iphonesimulator/$GYM_OUTPUT_NAME.app $GYM_OUTPUT_NAME.app
    - zip -r $GYM_OUTPUT_NAME.app.zip $GYM_OUTPUT_NAME.app
    - echo "SIMULATOR_APP_ARTIFACT=${APP_ARTIFACT_PATH}" >> artifacts.env
  artifacts:
    expire_in: 1 week
    reports:
      dotenv: artifacts.env
    paths:
      - $GYM_OUTPUT_NAME.app.zip

build_android_apk:
  stage: build
  extends:
    - .android_runner
    - .yarn_ruby_macos_cache_pull
    - .enable_android
    - .needs_android_dependencies
  variables:
    FL_GRADLE_PROJECT_DIR: $ANDROID_PROJECT_DIR
    APK_ARTIFACT_PATH: $JOB_ARTIFACT_PATH/app.apk
  script:
    - bundle exec fastlane android build_apk
    - mv $ANDROID_PROJECT_DIR/app/build/outputs/apk/$ANDROID_BUILD_TYPE/app-$ANDROID_BUILD_TYPE.apk app.apk
    - echo "ANDROID_APK_ARTIFACT=${APK_ARTIFACT_PATH}" >> artifacts.env
  artifacts:
    expire_in: 1 week
    reports:
      dotenv: artifacts.env
    paths:
      - app.apk

publish_alpha:
  stage: publish
  extends:
    - .yarn_install_build_dependent_job
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/repo.cdek.ru\/repository/g' /etc/apk/repositories
    - apk add --no-cache curl jq git
  script:
    - echo "{\"skip\":{\"changelog\":true,\"commit\":true,\"tag\":true}}" > .versionrc
    - npx yarn standard-version --prerelease alpha-$CI_MERGE_REQUEST_IID --no-verify
    - npx yarn config set npmAlwaysAuth true
    - npx yarn config set npmPublishRegistry "https://${ARTIFACTORY_PUBLISH_REPO}"
    - npx yarn config set npmRegistryServer "https://${ARTIFACTORY_PUBLISH_REPO}"
    - npx yarn config set npmAuthIdent "${ARTIFACTORY_LOGIN}:${ARTIFACTORY_PASS}"
    - npx yarn npm whoami
    - npm pkg set 'main'='./dist/index.js'
    - npm pkg set 'types'='./dist/index.d.ts'
    - npx yarn npm publish
    - |
      PACKAGE_NAME=$(jq -r ".name" package.json)
      PACKAGE_VERSION=$(jq -r ".version" package.json)
      PACKAGE_NAME_IN_CACHE=$(echo "$PACKAGE_NAME" | sed 's/\//-/g')
      curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data-urlencode "body=Опубликована альфа версия пакета: ${PACKAGE_VERSION}. Вы можете установить её в проекте для тестирования функционала пакета.
          \`yarn add ${PACKAGE_NAME}@${PACKAGE_VERSION}\`. Если вы уже устанавливали данную версию prerelease то следует почистить проект и кэш перед установкой - \`yarn remove ${PACKAGE_NAME} && rm ~/.yarn/**/cache/${PACKAGE_NAME_IN_CACHE}-npm-${PACKAGE_VERSION}*\`. Собраны сборки Storybook: [Android APK](${ANDROID_APK_ARTIFACT}), [iOS Simulator](${SIMULATOR_APP_ARTIFACT})" \
         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/notes"
  needs:
    - job: build
      artifacts: true
      optional: false
    - job: build_android_apk
      artifacts: true
      optional: true
    - job: build_ios_simulator
      artifacts: true
      optional: true

## Reusable configs

### Build start dependent job config
.needs_start_build: &needs_start_build
  job: start_build
  artifacts: false
  optional: false

.needs_only_start_build:
  needs:
    - <<: *needs_start_build

.yarn_install_build_dependent_job:
  extends:
    - .node_docker_runner
    - .yarn_docker_cache_pull
  needs:
    - job: yarn_install
      artifacts: false
      optional: false
    - <<: *needs_start_build

### yarn install dependent job config
.needs_yarn_macos: &needs_yarn_macos
  job: yarn_install_mac
  artifacts: false
  optional: false

### Ruby install dependent job config
.needs_ruby_macos: &needs_ruby_macos
  job: ruby_install_mac
  artifacts: false
  optional: false

### Ruby, yarn and start build dependent job config
.needs_yarn_ruby_start_build:
  needs:
    - <<: *needs_start_build
    - <<: *needs_yarn_macos
    - <<: *needs_ruby_macos

### Pods install dependent job config
.needs_pods_macos: &needs_pods_macos
  job: pods_install_mac
  artifacts: false
  optional: false

### Native iOS dependent jobs configs
.needs_ios_dependencies:
  needs:
    - <<: *needs_yarn_macos
    - <<: *needs_ruby_macos
    - <<: *needs_pods_macos

### Native Android dependent jobs configs
.needs_android_dependencies:
  needs:
    - <<: *needs_yarn_macos
    - <<: *needs_ruby_macos

## Base iOS job config
.basic_ios_job:
  extends:
    - .macos_runner
    - .pods_macos_cache_pull
    - .enable_ios
    - .needs_ios_dependencies
  variables:
  #    TODO: Uncomment when Google Services plist added
  #    SECURE_FILES_DOWNLOAD_PATH: $IOS_PROJECT_PATH/secrets
  #    GOOGLE_SERVICES_PLIST_FILEPATH: $SECURE_FILES_DOWNLOAD_PATH/$GOOGLE_SERVICES_PLIST_FILENAME

