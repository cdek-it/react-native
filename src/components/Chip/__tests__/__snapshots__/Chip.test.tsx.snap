// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Chip component tests showClose: false 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      false,
      false,
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "fontWeight": 400,
          "verticalAlign": "middle",
        },
        false,
      ]
    }
  >
    Chip
  </Text>
</View>
`;

exports[`Chip component tests showClose: false, disabled: true 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      {
        "backgroundColor": "rgba(0, 0, 0, 0.1000)",
        "borderColor": "#dbdada",
      },
      false,
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "fontWeight": 400,
          "verticalAlign": "middle",
        },
        {
          "color": "rgba(0, 0, 0, 0.6000)",
        },
      ]
    }
  >
    Chip
  </Text>
</View>
`;

exports[`Chip component tests showClose: true 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      false,
      false,
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "fontWeight": 400,
          "verticalAlign": "middle",
        },
        false,
      ]
    }
  >
    Chip
  </Text>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={14}
    bbWidth={14}
    disabled={false}
    fill="none"
    focusable={false}
    height={14}
    meetOrSlice={0}
    minX={0}
    minY={0}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    responsible={true}
    stroke="currentColor"
    strokeLinecap="round"
    strokeLinejoin="round"
    strokeWidth={2}
    style={
      [
        {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        [
          {
            "color": "rgba(0, 0, 0, 0.8000)",
            "height": 14,
            "width": 14,
          },
          false,
        ],
        {
          "flex": 0,
          "height": 14,
          "width": 14,
        },
      ]
    }
    tintColor="rgba(0, 0, 0, 0.8000)"
    vbHeight={24}
    vbWidth={24}
    width={14}
    xmlns="http://www.w3.org/2000/svg"
  >
    <RNSVGGroup
      color="rgba(0, 0, 0, 0.8000)"
      fill={null}
      propList={
        [
          "fill",
          "stroke",
          "strokeWidth",
          "strokeLinecap",
          "strokeLinejoin",
        ]
      }
      stroke={
        {
          "type": 2,
        }
      }
      strokeLinecap={1}
      strokeLinejoin={1}
      strokeWidth={2}
    >
      <RNSVGPath
        color="rgba(0, 0, 0, 0.8000)"
        d="M18 6l-12 12"
        fill={null}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        propList={
          [
            "fill",
            "stroke",
            "strokeWidth",
            "strokeLinecap",
            "strokeLinejoin",
          ]
        }
        responsible={true}
        stroke={
          {
            "type": 2,
          }
        }
        strokeLinecap={1}
        strokeLinejoin={1}
        strokeWidth={2}
      />
      <RNSVGPath
        color="rgba(0, 0, 0, 0.8000)"
        d="M6 6l12 12"
        fill={null}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        propList={
          [
            "fill",
            "stroke",
            "strokeWidth",
            "strokeLinecap",
            "strokeLinejoin",
          ]
        }
        responsible={true}
        stroke={
          {
            "type": 2,
          }
        }
        strokeLinecap={1}
        strokeLinejoin={1}
        strokeWidth={2}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Chip component tests showClose: true, disabled: true 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      {
        "backgroundColor": "rgba(0, 0, 0, 0.1000)",
        "borderColor": "#dbdada",
      },
      false,
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "fontWeight": 400,
          "verticalAlign": "middle",
        },
        {
          "color": "rgba(0, 0, 0, 0.6000)",
        },
      ]
    }
  >
    Chip
  </Text>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={14}
    bbWidth={14}
    disabled={true}
    fill="none"
    focusable={false}
    height={14}
    meetOrSlice={0}
    minX={0}
    minY={0}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    responsible={true}
    stroke="currentColor"
    strokeLinecap="round"
    strokeLinejoin="round"
    strokeWidth={2}
    style={
      [
        {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        [
          {
            "color": "rgba(0, 0, 0, 0.8000)",
            "height": 14,
            "width": 14,
          },
          {
            "color": "rgba(0, 0, 0, 0.6000)",
          },
        ],
        {
          "flex": 0,
          "height": 14,
          "width": 14,
        },
      ]
    }
    tintColor="rgba(0, 0, 0, 0.6000)"
    vbHeight={24}
    vbWidth={24}
    width={14}
    xmlns="http://www.w3.org/2000/svg"
  >
    <RNSVGGroup
      color="rgba(0, 0, 0, 0.6000)"
      fill={null}
      propList={
        [
          "fill",
          "stroke",
          "strokeWidth",
          "strokeLinecap",
          "strokeLinejoin",
        ]
      }
      stroke={
        {
          "type": 2,
        }
      }
      strokeLinecap={1}
      strokeLinejoin={1}
      strokeWidth={2}
    >
      <RNSVGPath
        color="rgba(0, 0, 0, 0.6000)"
        d="M18 6l-12 12"
        fill={null}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        propList={
          [
            "fill",
            "stroke",
            "strokeWidth",
            "strokeLinecap",
            "strokeLinejoin",
          ]
        }
        responsible={true}
        stroke={
          {
            "type": 2,
          }
        }
        strokeLinecap={1}
        strokeLinejoin={1}
        strokeWidth={2}
      />
      <RNSVGPath
        color="rgba(0, 0, 0, 0.6000)"
        d="M6 6l12 12"
        fill={null}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        propList={
          [
            "fill",
            "stroke",
            "strokeWidth",
            "strokeLinecap",
            "strokeLinejoin",
          ]
        }
        responsible={true}
        stroke={
          {
            "type": 2,
          }
        }
        strokeLinecap={1}
        strokeLinejoin={1}
        strokeWidth={2}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;
