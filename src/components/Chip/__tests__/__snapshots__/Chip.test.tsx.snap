// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Chip component tests removable: false 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      undefined,
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "includeFontPadding": false,
          "verticalAlign": "middle",
        },
        undefined,
      ]
    }
  >
    Chip
  </Text>
</View>
`;

exports[`Chip component tests removable: false, disabled: true 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      {
        "backgroundColor": "rgba(0, 0, 0, 0.1000)",
        "borderColor": "#dbdada",
      },
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "includeFontPadding": false,
          "verticalAlign": "middle",
        },
        {
          "color": "rgba(0, 0, 0, 0.6000)",
        },
      ]
    }
  >
    Chip
  </Text>
</View>
`;

exports[`Chip component tests removable: true 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      undefined,
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "includeFontPadding": false,
          "verticalAlign": "middle",
        },
        undefined,
      ]
    }
  >
    Chip
  </Text>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={14}
      bbWidth={14}
      fill="none"
      focusable={false}
      height={14}
      meetOrSlice={0}
      minX={0}
      minY={0}
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      style={
        [
          {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          [
            {
              "color": "rgba(0, 0, 0, 0.8000)",
              "height": 14,
              "width": 14,
            },
            {
              "color": "rgba(0, 0, 0, 0.6000)",
            },
          ],
          {
            "flex": 0,
            "height": 14,
            "width": 14,
          },
        ]
      }
      tintColor="rgba(0, 0, 0, 0.6000)"
      vbHeight={24}
      vbWidth={24}
      width={14}
      xmlns="http://www.w3.org/2000/svg"
    >
      <RNSVGGroup
        color="rgba(0, 0, 0, 0.6000)"
        fill={null}
        propList={
          [
            "fill",
            "stroke",
            "strokeWidth",
            "strokeLinecap",
            "strokeLinejoin",
          ]
        }
        stroke={
          {
            "type": 2,
          }
        }
        strokeLinecap={1}
        strokeLinejoin={1}
        strokeWidth={2}
      >
        <RNSVGPath
          color="rgba(0, 0, 0, 0.6000)"
          d="M18 6l-12 12"
          fill={null}
          propList={
            [
              "fill",
              "stroke",
              "strokeWidth",
              "strokeLinecap",
              "strokeLinejoin",
            ]
          }
          stroke={
            {
              "type": 2,
            }
          }
          strokeLinecap={1}
          strokeLinejoin={1}
          strokeWidth={2}
        />
        <RNSVGPath
          color="rgba(0, 0, 0, 0.6000)"
          d="M6 6l12 12"
          fill={null}
          propList={
            [
              "fill",
              "stroke",
              "strokeWidth",
              "strokeLinecap",
              "strokeLinejoin",
            ]
          }
          stroke={
            {
              "type": 2,
            }
          }
          strokeLinecap={1}
          strokeLinejoin={1}
          strokeWidth={2}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
</View>
`;

exports[`Chip component tests removable: true, disabled: true 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    [
      {
        "alignItems": "center",
        "alignSelf": "flex-start",
        "backgroundColor": "#E5E5E5",
        "borderColor": "rgba(255, 255, 255, 0.0001)",
        "borderRadius": 3.5,
        "borderWidth": 1,
        "flexDirection": "row",
        "gap": 7,
        "height": 24.5,
        "justifyContent": "center",
        "paddingHorizontal": 7,
        "paddingVertical": 0,
      },
      {
        "backgroundColor": "rgba(0, 0, 0, 0.1000)",
        "borderColor": "#dbdada",
      },
    ]
  }
>
  <Text
    numberOfLines={1}
    style={
      [
        {
          "color": "rgba(0, 0, 0, 0.8000)",
          "fontSize": 14,
          "includeFontPadding": false,
          "verticalAlign": "middle",
        },
        {
          "color": "rgba(0, 0, 0, 0.6000)",
        },
      ]
    }
  >
    Chip
  </Text>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": true,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={14}
      bbWidth={14}
      fill="none"
      focusable={false}
      height={14}
      meetOrSlice={0}
      minX={0}
      minY={0}
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      style={
        [
          {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          [
            {
              "color": "rgba(0, 0, 0, 0.8000)",
              "height": 14,
              "width": 14,
            },
            {
              "color": "rgba(0, 0, 0, 0.6000)",
            },
          ],
          {
            "flex": 0,
            "height": 14,
            "width": 14,
          },
        ]
      }
      tintColor="rgba(0, 0, 0, 0.6000)"
      vbHeight={24}
      vbWidth={24}
      width={14}
      xmlns="http://www.w3.org/2000/svg"
    >
      <RNSVGGroup
        color="rgba(0, 0, 0, 0.6000)"
        fill={null}
        propList={
          [
            "fill",
            "stroke",
            "strokeWidth",
            "strokeLinecap",
            "strokeLinejoin",
          ]
        }
        stroke={
          {
            "type": 2,
          }
        }
        strokeLinecap={1}
        strokeLinejoin={1}
        strokeWidth={2}
      >
        <RNSVGPath
          color="rgba(0, 0, 0, 0.6000)"
          d="M18 6l-12 12"
          fill={null}
          propList={
            [
              "fill",
              "stroke",
              "strokeWidth",
              "strokeLinecap",
              "strokeLinejoin",
            ]
          }
          stroke={
            {
              "type": 2,
            }
          }
          strokeLinecap={1}
          strokeLinejoin={1}
          strokeWidth={2}
        />
        <RNSVGPath
          color="rgba(0, 0, 0, 0.6000)"
          d="M6 6l12 12"
          fill={null}
          propList={
            [
              "fill",
              "stroke",
              "strokeWidth",
              "strokeLinecap",
              "strokeLinejoin",
            ]
          }
          stroke={
            {
              "type": 2,
            }
          }
          strokeLinecap={1}
          strokeLinejoin={1}
          strokeWidth={2}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
</View>
`;
